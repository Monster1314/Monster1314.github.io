<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>爬虫 01 爬虫基础</title>
    <url>/blog/2020/12/01/01%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-Python爬虫"><a href="#1-Python爬虫" class="headerlink" title="1. Python爬虫"></a>1. Python爬虫</h1><h2 id="1-1-爬虫用途"><a href="#1-1-爬虫用途" class="headerlink" title="1.1 爬虫用途"></a>1.1 爬虫用途</h2><hr>
<p><strong>网络爬虫</strong>：按照一定的规则，自动地爬取互联网信息的程序。</p>
<a id="more"></a>

<h2 id="1-2-应用方向"><a href="#1-2-应用方向" class="headerlink" title="1.2 应用方向"></a>1.2 应用方向</h2><hr>
<h3 id="1-2-1-定制搜索引擎"><a href="#1-2-1-定制搜索引擎" class="headerlink" title="1.2.1 定制搜索引擎"></a>1.2.1 定制搜索引擎</h3><p><strong>学习爬虫，可以私人定制一个搜索引擎，并且可以对搜索引擎的数据工作原理进行更深层次的理解</strong></p>
<h3 id="1-2-2-seo优化"><a href="#1-2-2-seo优化" class="headerlink" title="1.2.2 seo优化"></a>1.2.2 seo优化</h3><p>学习爬虫，可以更深层次理解搜索引擎爬虫工作原理，从而<strong>可以更好地进行搜索引擎优化</strong></p>
<h3 id="1-2-3-数据分析"><a href="#1-2-3-数据分析" class="headerlink" title="1.2.3 数据分析"></a>1.2.3 数据分析</h3><hr>
<p><strong>大数据时代，要进行数据分析，首先要有数据源，而学习爬虫，可以让我们获取更多的数据，并且这些数据源可以按我们的目的进行采集，去掉很多无关数据。</strong>        </p>
<h3 id="1-2-4-找工作"><a href="#1-2-4-找工作" class="headerlink" title="1.2.4 找工作"></a>1.2.4 找工作</h3><p><strong>还是要恰饭的嘛。</strong></p>
<h2 id="1-3-为什么要用Python爬虫"><a href="#1-3-为什么要用Python爬虫" class="headerlink" title="1.3 为什么要用Python爬虫"></a>1.3 为什么要用Python爬虫</h2><hr>
<ol>
<li>PHP：天生不适合</li>
<li>Java：生态圈完善，但语言本身较笨重，毕竟人生苦短……</li>
<li>C/C++：运行效率没得说，大拇指，但学起来也太难了叭。</li>
<li>Python：代码简洁优美，开发效率高。谁叫我这么菜，只想学简单的。</li>
</ol>
<h3 id="1-3-1-一个python爬虫"><a href="#1-3-1-一个python爬虫" class="headerlink" title="1.3.1 一个python爬虫"></a>1.3.1 一个python爬虫</h3><p>使用python爬取百度网址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 导入爬虫requests库</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">response = requests.get(url=url)  <span class="comment"># 向指定url地址发送请求</span></span><br><span class="line">print(response)  <span class="comment"># 返回状态码，200表示请求成功</span></span><br><span class="line">print(response.text)  <span class="comment"># 返回百度页面的html</span></span><br></pre></td></tr></table></figure>

<h1 id="2-爬虫"><a href="#2-爬虫" class="headerlink" title="2. 爬虫"></a>2. 爬虫</h1><h2 id="2-1-爬虫分类"><a href="#2-1-爬虫分类" class="headerlink" title="2.1 爬虫分类"></a>2.1 爬虫分类</h2><hr>
<h3 id="2-1-1-通用爬虫"><a href="#2-1-1-通用爬虫" class="headerlink" title="2.1.1 通用爬虫"></a>2.1.1 通用爬虫</h3><p>通用爬虫是搜索引擎抓取系统（百度、Google、Sogou等）一个重要组成部分。主要是将互联网上的网页下载到本地，形成一个互联网内容的镜像备份，为搜索引擎提供搜索支撑。</p>
<p><strong>搜索引擎工作原理：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Monster1314/blog/img/search.png" alt="img"></p>
<ul>
<li><p><strong>第一步： 抓取网页</strong></p>
<p>搜索引擎去网站上抓取数据</p>
</li>
<li><p><strong>第二步：数据存储</strong></p>
<p>搜索引擎通过爬虫得到的网页，将数据存入原始页面数据库（文档库）。其中的页面数据与用户浏览器得到的HTML是完全一样的。</p>
</li>
<li><p><strong>第三步：提供检索服务，网站排名</strong></p>
<p>搜索引擎将爬虫抓取回来的页面，进行各种步骤的预处理：中文分词，消除噪音，索引处理等</p>
</li>
</ul>
<p><strong>搜索引擎局限性</strong>：</p>
<ol>
<li>搜索引擎抓取的是整个网页，不是具体详细的信息；</li>
<li>搜索引擎无法提供针对具体某个客户需求的搜索结果。</li>
</ol>
<h3 id="2-1-2-聚焦爬虫"><a href="#2-1-2-聚焦爬虫" class="headerlink" title="2.1.2 聚焦爬虫"></a>2.1.2 聚焦爬虫</h3><p>聚焦爬虫，是“面向特定主题需求”的一种网络爬虫程序，它与通用搜索引擎爬虫的区别在于：<strong>聚焦爬虫在实施网页抓取时会对内容进行处理筛选，尽量保证只抓取与需求相关的网页数据。</strong></p>
<p>我们学当然要学聚焦爬虫 =v= 。</p>
<h3 id="2-1-3-Robots协议"><a href="#2-1-3-Robots协议" class="headerlink" title="2.1.3 Robots协议"></a>2.1.3 Robots协议</h3><p>Robots协议也称爬虫协议、机器人协议等，全称呢个“网络爬虫排除标准”（Robots Exclusion Protocol）,网站通过Robot协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取，如：</p>
<p>淘宝：<a href="https://www.taobao.com/robots.txt">https://www.taobao.com/robots.txt</a></p>
<p>百度：<a href="https://www.baidu.com/robots.txt">https://www.baidu.com/robots.txt</a></p>
<h1 id="3-请求与相应"><a href="#3-请求与相应" class="headerlink" title="3. 请求与相应"></a>3. 请求与相应</h1><ol>
<li>当我们在浏览器输入<a href="https://www.baidu.com时,浏览器会发送一个request请求去获取https//baidu.com%E7%9A%84html%E6%96%87%E4%BB%B6%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%94%E5%9B%9EResponse%E5%AF%B9%E8%B1%A1%E7%BB%99%E6%B5%8F%E8%A7%88%E5%99%A8%E3%80%82">https://www.baidu.com时，浏览器会发送一个Request请求去获取https://baidu.com的html文件，服务器返回Response对象给浏览器。</a></li>
<li>浏览器分析Response中的HTML，发现其中引用了很多文件，如Images文件、CSS文件。浏览器会自动再次发送请求去获取图片等。</li>
<li>当所有文件都下载成功后，网页会根据HTML语法结构，完整显示出来。</li>
</ol>
<h1 id="4-Chrome-开发者工具"><a href="#4-Chrome-开发者工具" class="headerlink" title="4. Chrome 开发者工具"></a>4. Chrome 开发者工具</h1><p>一般爬虫用的最多的是<strong>Chrome开发者工具</strong>，在谷歌浏览器中右击，左击“检查”，或者按快捷键F12即可打开开发者工具。</p>
<h2 id="4-1-元素面板（Elements）"><a href="#4-1-元素面板（Elements）" class="headerlink" title="4.1 元素面板（Elements）"></a>4.1 元素面板（Elements）</h2><hr>
<p><img src="https://cdn.jsdelivr.net/gh/Monster1314/blog/img/elements.png" alt="img"></p>
<p>打开谷歌开发者工具，点击elements，在这里可以看到网页的html，同时后续css/xpath/re都是从这里获取资源定位。</p>
<p>选页面某一节点右击也可复制xpath路径、css路径等。</p>
<h2 id="4-2-控制台面板（Console）"><a href="#4-2-控制台面板（Console）" class="headerlink" title="4.2 控制台面板（Console）"></a>4.2 控制台面板（Console）</h2><hr>
<p><img src="https://cdn.jsdelivr.net/gh/Monster1314/blog/img/console.png" alt="img"></p>
<p>控制台面板是用于显示JS和DOM对象信息的单独窗口。js解密会用console调试运行js代码。</p>
<h2 id="4-3-资源面板（Source）"><a href="#4-3-资源面板（Source）" class="headerlink" title="4.3 资源面板（Source）"></a>4.3 资源面板（Source）</h2><hr>
<p><img src="https://cdn.jsdelivr.net/gh/Monster1314/blog/img/source.png" alt="img"></p>
<p>左侧可以看到源文件以树结构进行展示。</p>
<p>中间可以用来调试js代码。</p>
<p>右侧是断点调试功能区。</p>
<h2 id="4-4-网络面板（Network）"><a href="#4-4-网络面板（Network）" class="headerlink" title="4.4 网络面板（Network）"></a>4.4 网络面板（Network）</h2><hr>
<p><img src="https://cdn.jsdelivr.net/gh/Monster1314/blog/img/network.png" alt="img"></p>
<p>网络（Network）面板记录页面上每个网络操作的相关信息，包括详细的耗时数据、HTTP标头和Cookie等。</p>
<h3 id="4-4-1-工具栏"><a href="#4-4-1-工具栏" class="headerlink" title="4.4.1 工具栏"></a>4.4.1 工具栏</h3><p><img src="https://cdn.jsdelivr.net/gh/Monster1314/blog/img/tool.png" alt="img"></p>
<p>从左到右：</p>
<p><strong>Stop recording network log</strong></p>
<p>默认情况下，只要开发者工具在开启状态，就会记录所有网络请求。红色表示开始，灰色表示关闭。</p>
<p><strong>Clear</strong></p>
<p>清空所有数据</p>
<p><strong>Filter</strong></p>
<p>数据包过滤，红色打开，蓝色关闭。经常使用它来过滤一些HTTP请求，如Ajax异步请求、图片、视频等。</p>
<p><strong>Search</strong></p>
<p>搜索框，只要在ALL里出现过的内容，就可以被直接搜索到。常用于数据检索与JS解密。</p>
<p><strong>Preserve log</strong></p>
<p>保留日志。当分析多个页面跳转的内容时，一定要勾上，不然页面跳转会把历史清空。</p>
<p><strong>Disable cache</strong></p>
<p>清空Javascript、css文件缓存，获取最新的。</p>
<p><strong>Hide data URLs</strong></p>
<p>用于是否隐藏dataurl。什么是dataurl？传统的通常img标记的src属性指定了一个远程服务器的资源，浏览器针对每个外部资源需要向服务器发送一次拉去资源请求。而Data URL技术是图片数据以base64字符串格式嵌入到了页面中，和HTML融为一体。</p>
<h3 id="4-4-2-Requests详情"><a href="#4-4-2-Requests详情" class="headerlink" title="4.4.2 Requests详情"></a>4.4.2 Requests详情</h3><p><strong>请求头</strong></p>
<p><strong>Headers</strong>是显示HTTP请求的Headers，我们通过这个能看到请求的方式，以及携带的请求参数等。</p>
<ul>
<li><p>General</p>
</li>
<li><p>Response Headers</p>
</li>
<li><p>Request Headers</p>
</li>
</ul>
<p><strong>预览</strong></p>
<p>Preview是请求结果的预览。</p>
<p><strong>响应体</strong></p>
<p>Response是请求返回的结果，一般是整个网站的源代码。如果该请求是异步请求，返回的结果一般是json文本数据。</p>
<p>此数据与浏览器展示的网页可能不一致，因为浏览器是动态加载的。</p>
]]></content>
      <categories>
        <category>python-spider</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>图片CDN加速</title>
    <url>/blog/2020/12/08/CDN%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p>一个免费的CDN加速，<a href="https://www.jsdelivr.com/?docs=gh" >JSDELIVR</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;user&#x2F;repo@version&#x2F;file</span><br><span class="line">user--GitHub用户名</span><br><span class="line">repo--分支名称</span><br><span class="line">version--版本号，可以不填</span><br><span class="line">file--图片路径，比如存储在GitHub仓库images文件夹下的1.jpg，可以写&#x2F;images&#x2F;1.jpg</span><br></pre></td></tr></table></figure>

<p>将修改过后的url放入md文件中远程推送即可实现图片CDN加速。</p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>-教程</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github搭建教程</title>
    <url>/blog/2020/12/08/hexo-github%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Github Pages 是GitHub提供的免费静态网页托管服务，可以用来托管博客、项目网站等静态网页。支持Jekyll、Hugo、Hexo编译静态资源，本文的主题是GitHub+Hexo。</p>
<a id="more"></a>

<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ol>
<li>NodeJs，Hexo是基于NodeJs驱动的一款博客框架</li>
<li>Git，</li>
<li>npm<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1>在某个文件夹下，右键打开git bash执行以下命令：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>之后执行下列命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init filename</span><br><span class="line"><span class="built_in">cd</span> filename</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，运行hexo s，其中s是sever的缩写。之后访问 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以预览效果了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><ol>
<li>账号注册</li>
<li>创建一个仓库<h1 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h1>有ssh则使用下列命令查看：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>
没有ssh则执行以下命令生成：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱地址&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;上面的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>之后将id_rsa.pub（公钥）添加到GitHub ssh key上。</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>修改 _ config.yml文件，在文件最后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 仓库git地址，不用http</span><br><span class="line">  branch: 分支名称</span><br></pre></td></tr></table></figure>

<p>安装部署插件hexo-deployer-git</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>本地推送：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<p>远程推送：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>在文件根目录下打开git bash，执行命令，创建新md文件，在./source/_posts下编辑即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 文章标题</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客注意事项</title>
    <url>/blog/2020/12/08/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="markdown文件"><a href="#markdown文件" class="headerlink" title="markdown文件"></a>markdown文件</h1><ol>
<li>不能含有诸如句号（中英文状态）之类的存在，否则无法推送成功</li>
</ol>
]]></content>
      <categories>
        <category>pycharm</category>
      </categories>
  </entry>
  <entry>
    <title>hexo资源压缩</title>
    <url>/blog/2020/12/08/hexo%E8%B5%84%E6%BA%90%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h3 id="hexo-all-minifier使用"><a href="#hexo-all-minifier使用" class="headerlink" title="hexo-all-minifier使用"></a><a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a>使用</h3><p>这款工具它兼顾了hexo-neat的易用性，和gulp的功能。</p>
<a id="more"></a>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>


<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在根目录<code>_config.yml</code>里添加:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">all_minifier:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/blog/2020/09/25/markdown/</url>
    <content><![CDATA[<h2 id="Markdown入门"><a href="#Markdown入门" class="headerlink" title="Markdown入门"></a>Markdown入门</h2><p><strong>概要</strong></p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有HTML的格式。</p>
<a id="more"></a>

<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="https://daringfireball.net/projects/markdown/">https://daringfireball.net/projects/markdown/</a></p>
<h3 id="GitHub-Markdown-Cheatsheet"><a href="#GitHub-Markdown-Cheatsheet" class="headerlink" title="GitHub Markdown Cheatsheet"></a>GitHub Markdown Cheatsheet</h3><p><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</a></p>
<h3 id="课程详细"><a href="#课程详细" class="headerlink" title="课程详细"></a>课程详细</h3><ol>
<li>课程介绍</li>
<li>预览插件</li>
<li>设置标题</li>
<li>自然段改行</li>
<li>引用表现</li>
<li>增加分割线</li>
<li>强调表现</li>
<li>列表表示</li>
<li>超文本链接</li>
<li>代码高亮显示</li>
<li>图片显示</li>
<li>表格显示</li>
</ol>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul>
<li>记事本等文本编辑器</li>
</ul>
<ol>
<li>Visual Studio Code</li>
<li>Pycharm</li>
<li>ATOM</li>
</ol>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>html标题标记的生成(h1～h6)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># h1标题</span><br><span class="line">## h2标题</span><br><span class="line">### h3标题</span><br><span class="line">#### h4标题</span><br><span class="line">##### h5标题</span><br><span class="line">###### h6标题</span><br><span class="line"></span><br><span class="line">h1标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">h2标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul>
<li>引用文的表现方法：&gt;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是引用</span><br><span class="line"></span><br><span class="line">&gt; 我是引用</span><br></pre></td></tr></table></figure>



<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><ul>
<li>为文章分割线：<code>---</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- ------</span><br></pre></td></tr></table></figure>



<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><ul>
<li>斜体：<code>*XXX*</code>, <code>_XXX_</code></li>
<li>粗体：<code>**XXX**</code>,<code> __XXX__</code></li>
</ul>
<p>案例：<em>XXX</em>, <em>XXX</em></p>
<p>案例：<strong>XXX</strong> , <strong>XXX</strong></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>列表符号：-</li>
<li>列表符号：*</li>
<li>列表符号：+</li>
<li>列表符号：数字</li>
</ul>
<p>练习：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 项目</span><br><span class="line">  - 项目</span><br><span class="line">    - 项目</span><br><span class="line"></span><br><span class="line">1. 项目1</span><br><span class="line">2. 项目2</span><br><span class="line">3. 项目3</span><br><span class="line"></span><br><span class="line">- [ ] 计划任务</span><br><span class="line">- [x] 完成任务</span><br></pre></td></tr></table></figure>



<h3 id="超文本链接"><a href="#超文本链接" class="headerlink" title="超文本链接"></a>超文本链接</h3><ul>
<li>超文本链接的书写</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.python.org&#x2F;</span><br><span class="line"></span><br><span class="line">[Python.org](https:&#x2F;&#x2F;www.python.org&#x2F;)</span><br><span class="line"></span><br><span class="line">[Python.org](https:&#x2F;&#x2F;www.python.org&#x2F; &quot;python官方文档&quot;)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.python.org/">https://www.python.org/</a></p>
<h3 id="代码高亮显示"><a href="#代码高亮显示" class="headerlink" title="代码高亮显示"></a>代码高亮显示</h3><ul>
<li>代码高亮显示符号：`</li>
<li>代码高亮显示符号：~</li>
</ul>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​&#96;&#96;&#96;python</span><br><span class="line">def add(x, y) </span><br><span class="line">    return x+y</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">说明：您可以使用 &#96;add(x,y)&#96; 函数计算两个数的和。</span><br></pre></td></tr></table></figure>



<h3 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h3><ul>
<li>图片的引用与显示：<img src=""></li>
</ul>
<p>![alt文字](C:/Users/muzha/Documents/WeChat Files/wxid_jqw01i0de0iv22/FileStorage/File/2020-09/markdown/图片url 图片title)</p>
<h3 id="制作图片链接"><a href="#制作图片链接" class="headerlink" title="制作图片链接"></a>制作图片链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![img](https:&#x2F;&#x2F;gss0.bdstatic.com&#x2F;94o3dSag_xI4khGkpoWK1HF6hhy&#x2F;baike&#x2F;c0%3Dbaike150%2C5%2C5%2C150%2C50&#x2F;sign&#x3D;db37d3b8454a20a425133495f13bf347&#x2F;3b87e950352ac65c8819edd9f1f2b21193138a78.jpg)</span><br></pre></td></tr></table></figure>



<h3 id="表格显示"><a href="#表格显示" class="headerlink" title="表格显示"></a>表格显示</h3><ul>
<li>表格制作与显示</li>
</ul>
<p>使用 <code>-</code> 和 <code>|</code> 来制作表格。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| TH1 | TH2 | TH3 |</span><br><span class="line">----|----|----</span><br><span class="line">| TD1 | TD3 | TD5 |</span><br><span class="line">| TD2 | TD4 | TD6 |</span><br></pre></td></tr></table></figure>

<h3 id="使用表格对齐"><a href="#使用表格对齐" class="headerlink" title="使用表格对齐"></a>使用表格对齐</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 居左 | 居中 | 居右 |</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|1 |2 |3 |</span><br><span class="line">|4 |5 |6 | </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>markdown</category>
      </categories>
  </entry>
  <entry>
    <title>pycharm基本设置</title>
    <url>/blog/2020/12/08/pycharm%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>File-Plugins</p>
<ol>
<li><p>Atom Material Icons  图标样式</p>
</li>
<li><p>Material Theme UI  主题UI</p>
</li>
<li><p>Translation  翻译工具</p>
<a id="more"></a>
<h1 id="仓库镜像"><a href="#仓库镜像" class="headerlink" title="仓库镜像"></a>仓库镜像</h1><p>添加以下镜像源：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>推荐默认字体UI，大小为16，间距1.4</p>
<h1 id="专业版激活"><a href="#专业版激活" class="headerlink" title="专业版激活"></a>专业版激活</h1><p><a href="http://idea.medeming.com/jets/">激活网站</a></p>
<h1 id="禁止自动更新"><a href="#禁止自动更新" class="headerlink" title="禁止自动更新"></a>禁止自动更新</h1><p>apparence-system settings-updates，取消勾选automatically check</p>
]]></content>
      <categories>
        <category>pycharm</category>
      </categories>
  </entry>
  <entry>
    <title>python技巧</title>
    <url>/blog/2020/09/19/python%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<ol>
<li>正确使用True和False的判断</li>
<li>正确返回None值</li>
<li>…</li>
</ol>
<a id="more"></a>

<h3 id="1-正确使用True和False的判断"><a href="#1-正确使用True和False的判断" class="headerlink" title="1. 正确使用True和False的判断"></a>1. 正确使用True和False的判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">false_value = [</span><br><span class="line">    `[],`</span><br><span class="line"></span><br><span class="line">    `&#123;&#125;,`</span><br><span class="line"></span><br><span class="line">    `<span class="literal">False</span>,`</span><br><span class="line"></span><br><span class="line">    `<span class="string">&#x27;&#x27;</span>,`</span><br><span class="line"></span><br><span class="line">    `<span class="number">0</span>,`</span><br><span class="line"></span><br><span class="line">    `<span class="number">0.0</span>,`</span><br><span class="line"></span><br><span class="line">    `<span class="literal">None</span>,`</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> false_value:</span><br><span class="line">    print(<span class="literal">True</span> <span class="keyword">if</span> value <span class="keyword">else</span> <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-正确返回None值"><a href="#2-正确返回None值" class="headerlink" title="2. 正确返回None值"></a>2. 正确返回None值</h3><p>一个函数里面可能多个返回值都为True或False，这时候就要用is明确指定返回值，如None</p>
<h3 id="3-if条件优化"><a href="#3-if条件优化" class="headerlink" title="3. if条件优化"></a>3. if条件优化</h3><ul>
<li>直接判断——效率最低</li>
<li>in list 列表判断——效率最高,推荐 </li>
<li>in set 集合——效率居中</li>
</ul>
<h3 id="4-字符串格式化技巧"><a href="#4-字符串格式化技巧" class="headerlink" title="4. 字符串格式化技巧"></a>4. 字符串格式化技巧</h3><ul>
<li>直接拼接</li>
<li>“{}”.format </li>
<li><code>&#39;%s&#39;%()</code></li>
<li>python3.6+，<code>f&#39;my age is &#123;age&#125;&#39;</code> 推荐</li>
</ul>
<h3 id="5-Flat-is-better-than-nested"><a href="#5-Flat-is-better-than-nested" class="headerlink" title="5. Flat is better than nested"></a>5. Flat is better than nested</h3><ul>
<li><code>import this</code> 可以打印python之禅</li>
<li>nested 指的是if 嵌套、一层层包裹，不推荐</li>
<li>flat要代码扁平化，用if、 elif，避免多个if，不满足条件直接返回，推荐</li>
</ul>
<h3 id="6-列表解析，也就是列表推导式"><a href="#6-列表解析，也就是列表推导式" class="headerlink" title="6. 列表解析，也就是列表推导式"></a>6. 列表解析，也就是列表推导式</h3><p>除了减少代码量之外，还能提高运行效率，时间接近原来的一半</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p><code>[item for item in items if item%2 == 0]</code></p>
<h3 id="7-字典解析"><a href="#7-字典解析" class="headerlink" title="7. 字典解析"></a>7. 字典解析</h3><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><p><code>a = [1, 2, 3, 4, 5, 6]</code></p>
<p><code>&#123;item:str(item) for item in a&#125;</code></p>
<h3 id="8-字典合并"><a href="#8-字典合并" class="headerlink" title="8. 字典合并"></a>8. 字典合并</h3><ul>
<li>循环添加，也可以字典解析，但并不推荐</li>
<li>update更新，`d1.update(d2)<br>`</li>
<li>python3.5+， <code>&#123;**d1, **d2, **d3&#125;</code>推荐</li>
</ul>
<h3 id="9-字典安全访问"><a href="#9-字典安全访问" class="headerlink" title="9. 字典安全访问"></a>9. 字典安全访问</h3><ul>
<li>用<code>try-except</code>抛出异常</li>
<li>d.get(‘’)<br># 默认空返回None，也可以设置</li>
</ul>
<p>`    d.get(‘name’,’unkown’)</p>
<h1 id="设置空返回unknown"><a href="#设置空返回unknown" class="headerlink" title="设置空返回unknown`"></a>设置空返回unknown`</h1><ul>
<li>python内置defaultdict</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collection <span class="keyword">import</span> defaultdict</span><br><span class="line">d_new = defaultdict(lamda:<span class="string">&#x27;missing&#x27;</span>, d)</span><br><span class="line">d_new[<span class="string">&#x27;name&#x27;</span>] <span class="comment"># 返回name对应的</span></span><br><span class="line">d_new[<span class="string">&#x27;asdf&#x27;</span>] <span class="comment"># 不存在则返回missing</span></span><br></pre></td></tr></table></figure>

<h3 id="10-关于for循环，类中实现for循环"><a href="#10-关于for循环，类中实现for循环" class="headerlink" title="10. 关于for循环，类中实现for循环"></a>10. 关于for循环，类中实现for循环</h3><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.data.append(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># return self.data.__iter__()</span></span><br><span class="line">        <span class="comment"># 这里也可以加一个for循环</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 = B(x=<span class="number">1</span>, y=<span class="number">2</span>)</span><br><span class="line">b2 = B(x=<span class="number">3</span>, y=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.add(b1)</span><br><span class="line">a.add(b2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">    print(item.x, item.y)</span><br></pre></td></tr></table></figure>

<h3 id="11-为什么要使用yield"><a href="#11-为什么要使用yield" class="headerlink" title="11. 为什么要使用yield"></a>11. 为什么要使用yield</h3><p>一次性读取可能会占用太多内存，yield可以提高效率</p>
<h3 id="12-如何在递归调用中使用yield"><a href="#12-如何在递归调用中使用yield" class="headerlink" title="12. 如何在递归调用中使用yield"></a>12. 如何在递归调用中使用yield</h3><h4 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file</span>(<span class="params">folder_name</span>):</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(folder_name):</span><br><span class="line">    full_path = os.path.join(folder_name, item)</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(full_path):</span><br><span class="line">        <span class="keyword">yield</span> full_path</span><br><span class="line">    <span class="keyword">elif</span> os.path.isdir(full_path):</span><br><span class="line">        <span class="comment"># 方法一</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> get_file(full_path):</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line">        <span class="comment"># 方法二,python3</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> get_file(full_path)</span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> get_file(path):</span><br><span class="line">    print(file_name)</span><br></pre></td></tr></table></figure>

<h3 id="13-巧用lambda"><a href="#13-巧用lambda" class="headerlink" title="13. 巧用lambda"></a>13. 巧用lambda</h3><p>函数参数为函数时，可以考虑能否用lambda实现</p>
<p>Jupyter shift+tab可以查看信息，比如sort排序传入key</p>
<h3 id="14-处理程序中的异常"><a href="#14-处理程序中的异常" class="headerlink" title="14. 处理程序中的异常"></a>14. 处理程序中的异常</h3><p>try-except，可以具体抛出某些异常。</p>
<p>总的如<code>except Exception as e：</code></p>
<p>具体的如<code>except DNSError:</code></p>
<h3 id="15-函数默认参数"><a href="#15-函数默认参数" class="headerlink" title="15. 函数默认参数"></a>15. 函数默认参数</h3><p>为函数参数设置默认值</p>
<h3 id="16-可变数量参数"><a href="#16-可变数量参数" class="headerlink" title="16. 可变数量参数"></a>16. 可变数量参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">x, *args</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意： 使用```*args```之后，x就不能赋值了，否则会报错SyntaxError</span></span><br><span class="line"><span class="comment"># 当如下形式时，x必须赋值,否则会报错TypeError：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">*args, x</span>):</span></span><br><span class="line">    print(args, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,x=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="17-字典和-kwargs-的关系"><a href="#17-字典和-kwargs-的关系" class="headerlink" title="17. 字典和```**kwargs```的关系"></a>17. 字典和```**kwargs```的关系</h3><p>实现可变数量位置参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">x, **kwargs</span>):</span></span><br><span class="line">    print(x, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function(x=<span class="number">1</span>, a=<span class="number">2</span>, b=<span class="number">3</span>, c=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">1</span> &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum1</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    print(x+y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(x=<span class="number">1</span>, y=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(**&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>:<span class="string">&#x27;2&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 传入参数\`\`\`\_\_&#123;&#x27;x&#x27;:1, &#x27;y&#x27;:2&#125;\`\`\`与传入参数\`\`\`x=1, y=2\`\`\\`返回结果一样</span></span><br></pre></td></tr></table></figure>



<h3 id="18-默认参数陷阱"><a href="#18-默认参数陷阱" class="headerlink" title="18. 默认参数陷阱"></a>18. 默认参数陷阱</h3><p>不建议用列表作为参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_default_arg</span>(<span class="params">s, time, target=[]</span>):</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(time):</span><br><span class="line">        target.append(a)</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bad_default_arg(s=<span class="string">&#x27;a&#x27;</span>, time=<span class="number">3</span>) <span class="comment"># 返回 [&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]</span></span><br><span class="line">bad_default_arg(s=<span class="string">&#x27;b&#x27;</span>, time=<span class="number">3</span>, target=<span class="string">&#x27;a&#x27;</span>) <span class="comment"># 返回 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;b&#x27;, &#x27;b&#x27;]</span></span><br><span class="line">bad_default_arg(s=<span class="string">&#x27;AB&#x27;</span>, time=<span class="number">2</span>) <span class="comment"># 返回 [&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;AB&#x27;, &#x27;AB&#x27;]</span></span><br><span class="line"><span class="comment"># 使用列表作为参数时，假如不指定，则会使用上一次的默认值</span></span><br><span class="line">bad_default_arg(s=<span class="string">&#x27;F&#x27;</span>, time=<span class="number">2</span>) <span class="comment"># 返回 [&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;AB&#x27;, &#x27;AB&#x27;, &#x27;F&#x27;, &#x27;F&#x27;]</span></span><br><span class="line">解决方法：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">good_default_arg</span>(<span class="params">s, time, target=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> target <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        target = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(time):</span><br><span class="line">        target.append(a)</span><br><span class="line">        <span class="keyword">return</span> target</span><br></pre></td></tr></table></figure>

<h3 id="19-尽量避免使用-from-xxx-import"><a href="#19-尽量避免使用-from-xxx-import" class="headerlink" title="19. 尽量避免使用```from xxx import *```"></a>19. 尽量避免使用```from xxx import *```</h3><p>库中方法可能与已命名方法重名，建议用什么引入什么</p>
<h3 id="20-合理使用virtualenv与pip"><a href="#20-合理使用virtualenv与pip" class="headerlink" title="20. 合理使用virtualenv与pip"></a>20. 合理使用virtualenv与pip</h3><ol>
<li>进入文件，virtualenv –python3.6 env 创建虚拟环境</li>
<li>激活环境， source env/bin/activate</li>
<li>安装使用的库</li>
<li>pip freeze，把已安装的库写入txt文件里</li>
<li>退出环境， deactivate</li>
<li>pip install -r xxx.txt 安装所有的依赖</li>
</ol>
<h3 id="21-类的属性和实例属性"><a href="#21-类的属性和实例属性" class="headerlink" title="21. 类的属性和实例属性"></a>21. 类的属性和实例属性</h3><ul>
<li>class类中定义属性，尽量在__init__下定义</li>
<li>或者在class下定义</li>
</ul>
<h3 id="22-类实例的受保护属性和私有属性"><a href="#22-类实例的受保护属性和私有属性" class="headerlink" title="22. 类实例的受保护属性和私有属性"></a>22. 类实例的受保护属性和私有属性</h3><ul>
<li>加一个下划线_，仍然可以被访问，即受保护</li>
<li>加两个下划线__，无法被访问，即私有，但是实际上还是可以访问的，只不过名字编程了_类名__属性名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;docstring for A&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(A, self).__init__()</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(name=<span class="string">&#x27;python&#x27;</span>, age=<span class="number">27</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a.__age  <span class="comment"># 无法被访问</span></span><br></pre></td></tr></table></figure>

<h3 id="23-使用类的property"><a href="#23-使用类的property" class="headerlink" title="23. 使用类的property"></a>23. 使用类的property</h3><p>访问类的属性，需要property，但是是只读的</p>
<p>要修改的话，可以定义setter</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@age.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    self.__age = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;My name is &#123;&#125; and my age is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.__name, self.__age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B(<span class="string">&#x27;Demo&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b.age = <span class="number">40</span> <span class="comment"># 可以修改</span></span><br></pre></td></tr></table></figure>

<h3 id="24-tuple元组技巧"><a href="#24-tuple元组技巧" class="headerlink" title="24. tuple元组技巧"></a>24. tuple元组技巧</h3><ul>
<li>同时赋值，保证个数一致</li>
<li>enumerate(),将列表变为元组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; [1, 2, 3, 4]</span><br><span class="line">for item in enumerate(a):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 返回</span><br><span class="line">（0，1）</span><br><span class="line">（1，2）</span><br><span class="line">（2，3）</span><br><span class="line">（3，4）</span><br></pre></td></tr></table></figure>

<h3 id="25-特殊元组namedtuple"><a href="#25-特殊元组namedtuple" class="headerlink" title="25. 特殊元组namedtuple"></a>25. 特殊元组namedtuple</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">Student = collections.namedtuple(<span class="string">&#x27;Student&#x27;</span>, <span class="string">&#x27;id, name, score&#x27;</span>)</span><br><span class="line">students = [</span><br><span class="line">    Student(<span class="number">1</span>, <span class="string">&#x27;ABC&#x27;</span>, <span class="number">90</span>),</span><br><span class="line">    Student(<span class="number">2</span>, <span class="string">&#x27;XYZ&#x27;</span>, <span class="number">85</span>),</span><br><span class="line">    Student(<span class="number">3</span>, <span class="string">&#x27;asdf&#x27;</span>, <span class="number">80</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> students:</span><br><span class="line">    print(<span class="string">&#x27;name=&#123;&#125;, id=&#123;&#125;, score=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s.name, s.<span class="built_in">id</span>, s.score))</span><br></pre></td></tr></table></figure>

<p>提高可读性及可维护性，效率并无太大区别</p>
<h3 id="26-dict和zip"><a href="#26-dict和zip" class="headerlink" title="26. dict和zip"></a>26. dict和zip</h3><p>创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">data = ((<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>)) <span class="comment"># 只要是可迭代对象都行</span></span><br><span class="line"><span class="built_in">dict</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 两个元素数量相同的列表</span></span><br><span class="line"><span class="built_in">dict</span>(<span class="built_in">zip</span>(x,y))  <span class="comment"># 生成对应字典</span></span><br></pre></td></tr></table></figure>

<h3 id="27-字典按照key-value大小排序"><a href="#27-字典按照key-value大小排序" class="headerlink" title="27. 字典按照key/value大小排序"></a>27. 字典按照key/value大小排序</h3><p><code>dict(sorted(d.items(), key=lambda x:x[1], reverse=True))</code></p>
<h3 id="28-通过debug学习Python生成器"><a href="#28-通过debug学习Python生成器" class="headerlink" title="28. 通过debug学习Python生成器"></a>28. 通过debug学习Python生成器</h3><p>yield生成器</p>
<h3 id="29-string操作技巧"><a href="#29-string操作技巧" class="headerlink" title="29. string操作技巧"></a>29. string操作技巧</h3><p><code>s = &#39; Last Checkpoint: a few seconds ago (unsaved changes) &#39;</code></p>
<p>最好是链条式做完，而不是一个一个做</p>
<h3 id="30-列表解析取代map和filter"><a href="#30-列表解析取代map和filter" class="headerlink" title="30. 列表解析取代map和filter"></a>30. 列表解析取代map和filter</h3><h3 id="31-上下文管理"><a href="#31-上下文管理" class="headerlink" title="31. 上下文管理"></a>31. 上下文管理</h3><p>with open</p>
<h3 id="32-一个单独的下划线可以怎么用"><a href="#32-一个单独的下划线可以怎么用" class="headerlink" title="32. 一个单独的下划线可以怎么用"></a>32. 一个单独的下划线可以怎么用</h3><ul>
<li>for循环中，不使用i，可用_代替</li>
<li>输入1+2返回3，实际上3就赋值给了_</li>
<li>取用列表或元组的元素时，无关紧要的可用_代替</li>
</ul>
<h3 id="33-str-和-repr-区别"><a href="#33-str-和-repr-区别" class="headerlink" title="33. ```__str__和__repr__```区别"></a>33. ```__str__和__repr__```区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;name=<span class="subst">&#123;self.name&#125;</span>, age=<span class="subst">&#123;self.age&#125;</span>&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;name:<span class="subst">&#123;self.name&#125;</span>, age:<span class="subst">&#123;self.age&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;Python&#x27;</span>, <span class="number">27</span>)</span><br><span class="line">print(p)  <span class="comment"># 先找__str__没有再找__repr__,都没有打印地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p <span class="comment"># 命令行中输入p，有__repr__才能返回值，否则返回地址</span></span><br></pre></td></tr></table></figure>

<h3 id="34-定义自己的exception"><a href="#34-定义自己的exception" class="headerlink" title="34. 定义自己的exception"></a>34. 定义自己的exception</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> NameTooShort</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">raise</span> NameTooShort(<span class="string">&#x27;Name is too short.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    validate(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameTooShort <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># exceprion.py 文件下</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTooShort</span>(<span class="params">ValueError</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 多个错误可以定义一个基类继承自Exception，其他错误都继承这个基类</span></span><br></pre></td></tr></table></figure>

<h3 id="35-mypy做静态类型检查"><a href="#35-mypy做静态类型检查" class="headerlink" title="35. mypy做静态类型检查"></a>35. mypy做静态类型检查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; int:</span> <span class="comment"># x、y都是int对象，函数返回int对象</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="built_in">sum</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)) <span class="comment"># 并不会报错，用mypy会提示希望是int，但却是str类型</span></span><br></pre></td></tr></table></figure>

<h3 id="36-改进的namedtuple"><a href="#36-改进的namedtuple" class="headerlink" title="36. 改进的namedtuple"></a>36. 改进的namedtuple</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3.6+</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NamedTuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">NmaedTuple</span>):</span></span><br><span class="line">    color: <span class="built_in">str</span></span><br><span class="line">    mileage: <span class="built_in">float</span></span><br><span class="line">    automatic: <span class="built_in">bool</span></span><br><span class="line">    <span class="comment"># 以上类型只是建议，不用对应的类型也不会报错，mypy会报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">car = Car(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;100.01&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">car.mileage = <span class="number">100</span> <span class="comment"># 会报错，因为不支持修改数据</span></span><br></pre></td></tr></table></figure>

<h3 id="37-用哪种数据结构存储数据"><a href="#37-用哪种数据结构存储数据" class="headerlink" title="37. 用哪种数据结构存储数据"></a>37. 用哪种数据结构存储数据</h3><ul>
<li>为了简单用dict或tuple，字典数据得不到保护，元组数据顺序不能乱</li>
<li>class，灵活，但是普通class属性还是可以改变的，也可以添加属性</li>
<li>NamedTuple，定义子类，得到有效保护</li>
</ul>
<h3 id="38-Python3-7-Data-Class"><a href="#38-Python3-7-Data-Class" class="headerlink" title="38. Python3.7+ Data Class"></a>38. Python3.7+ Data Class</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPeple</span>:</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    <span class="comment"># 仅仅是提示</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = NewPeple(<span class="string">&#x27;A&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">p2 = NewPeple(<span class="string">&#x27;A&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(p1, p2) <span class="comment"># 普通类还要重写__str__ ,__repr__</span></span><br><span class="line">print(<span class="string">&#x27;p1=p2?&#x27;</span>, p1==p2) <span class="comment"># 普通类需要重写__eq__</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
</search>
